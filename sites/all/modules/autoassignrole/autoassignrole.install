<?php

/**
 * @file
 * Installation related functionality for the auto assign role module.
 */

/**
 * Implements hook_uninstall().
 */
function autoassignrole_uninstall() {
  db_delete('variable')
    ->condition('name', db_like('autoassignrole_') . '%', 'LIKE')
    ->execute();
}

/**
 * Implementation of hook_schema().
 */
function autoassignrole_schema() {
  $schema['autoassignrole_page'] = array(
    'description' => 'Stores autoassignrole page information',
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The unique machine name of this page.',
        'object default' => '',
      ),
      'roles' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'The roles for this page',
        'serialize' => TRUE,
        'object default' => array(),
      ),
      'path' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'The path for this page',
        'object default' => '',
      ),
      'menu' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The default parent menu for this menu item',
        'object default' => '',
      ),
      'title' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'The description for this page',
        'object default' => '',
      ),
      'display' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The display type for this page',
        'object default' => '',
      ),
    ),
    'primary key' => array('name'),
    'export' => array(
      'key' => 'name',
      'key name' => 'Machine name',
      'primary key' => 'name',
      'identifier' => 'autoassignrole',
      'default hook' => 'autoassignrole_page_default',
      'api' => array(
        'owner' => 'autoassignrole',
        'api' => 'autoassignrole',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
  );

  return $schema;
}

/**
 * Implementations of hook_update_N().
 */

/**
 * Upgrade the custom table used on the D6 version.
 */
function autoassignrole_update_7100() {
  if (db_table_exists('autoassignrole')) {
    // The D6 variables with the D7 defaults.
    $defaults = array(
      'auto_active' => 0,
      'auto_admin_active' => 0,
      'auto_roles' => serialize(array()),
      'node_user_register' => '',
      'page_active' => 0,
      'user_active' => 0,
      'user_description' => t('Select a role'),
      'user_fieldset_title' => t('User Roles'),
      'user_multiple' => 0,
      'user_required' => 0,
      'user_roles' => serialize(array()),
      'user_selection' => 0,
      'user_sort' => 'SORT_ASC',
      'user_title' => t("Role"),
    );

    // Get a list of all current variables.
    $results = db_select('autoassignrole', 'a')
      ->fields('a', array('arid', 'value'))
      ->execute();
    while ($setting = $results->fetchObject()) {
      if (isset($defaults[$setting->arid])) {
        if (strcmp($setting->value, $defaults[$setting->arid]) === 0) {
          drupal_set_message(t('AutoAssignRole upgrade: @var is using the default value so has been skipped.', array('@var' => $setting->arid)));
        }
        else {
          // Expand any serialized objects, ignore any error messages.
          if (!empty($setting->value) && !is_numeric($setting->value)) {
            $unserialized = @unserialize($setting->value);
            if (!empty($unserialized) && $setting->value != $unserialized) {
              $setting->value = $unserialized;
            }
          }
          // Save the custom value.
          variable_set('autoassignrole_' . $setting->arid, $setting->value);
          drupal_set_message(t('AutoAssignRole upgrade: @var has been converted.', array('@var' => $setting->arid)));
        }
      }
    }
    drupal_set_message(t('AutoAssignRole upgrade: removed the "autoassignrole" table.'));
    db_drop_table('autoassignrole');
  }
  else {
    drupal_set_message(t('AutoAssignRole: no need to upgrade existing D7 sites.'));
  }
}

/**
 * Add the assign to page table.
 */
function autoassignrole_update_7101() {
  if (!db_table_exists('autoassignrole_page')) {
    $schema['autoassignrole_page'] = array(
      'description' => 'Stores autoassignrole page information',
      'fields' => array(
        'rid_page_id' => array(
          'type' => 'serial',
          'not null' => TRUE,
          'description' => 'The unique identifier for this role page',
        ),
        'rids' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'The role IDs for this page',
        ),
        'path' => array(
          'type' => 'text',
          'not null' => TRUE,
          'description' => 'The path for this page',
        ),
        'menu' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'The default parent menu for this menu item',
        ),
        'title' => array(
          'type' => 'text',
          'not null' => TRUE,
          'description' => 'The description for this page',
        ),
        'display' => array(
          'type' => 'int',
          'not null' => TRUE,
          'description' => 'The display type for this page',
        ),
      ),
      'primary key' => array('rid_page_id'),
    );

    db_create_table('autoassignrole_page', $schema['autoassignrole_page']);
  }
}

/**
 * Update variable autoassignrole_user_selection.
 */
function autoassignrole_update_7102() {
  $user_selection = variable_get('autoassignrole_user_selection', 0);
  // If the current user_selection is set to be a checkbox (2), update it.
  if ($user_selection == 2) {
    variable_set('autoassignrole_user_selection', AUTOASSIGNROLE_ELEMENT_RADIO_CHECKBOX);
  }
}

/**
 * Migrate db schema from Drupal 6 to 7.
 */
function autoassignrole_update_7103() {
  // The current autoassignrole_page table is in a d6 format.
  if (db_field_exists('autoassignrole_page', 'rid')) {
    // Rename the current 'old' table.
    db_rename_table('autoassignrole_page', 'autoassignrole_page_v6');
    // Recreate the new table using the new schema.
    autoassignrole_update_7101();

    // Get the the contents of the old table to add to the new table.
    $query = db_select('autoassignrole_page_v6', 'aarp6')
      ->fields('aarp6');

    $result = $query->execute();

    $values = array();
    $roles_keys = array_keys(user_roles(TRUE));
    while ($row = $result->fetchAssoc()) {
      foreach ($roles_keys as $role_id) {
        $rids[$role_id] = $role_id == $row['rid'] ? $row['rid'] : 0;
      }
      $values[] = array(
        'rids' => serialize($rids),
        'path' => $row['path'],
        'menu' => $row['menu'],
        'title' => $row['title'],
        'display' => $row['display'],
      );
    }

    // Insert the values from the old table into the new table.
    $query = db_insert('autoassignrole_page')
      ->fields(array('rids', 'path', 'menu', 'title', 'display'));
    foreach ($values as $record) {
      $query->values($record);
    }
    $query->execute();

    // Delete the old d6 table.
    db_drop_table('autoassignrole_page_v6');
  }
}

/**
 * Update the user description variable to allow HTML.
 */
function autoassignrole_update_7104() {
  $user_desc = _autoassignrole_get_user_description();
  if (!is_array($user_desc)) {
    $defaults = array(
      'value' => $user_desc,
      'format' => filter_default_format(),
    );
    variable_set('autoassignrole_user_description', $defaults);
  }
}

/**
 * Features integration.
 */
function autoassignrole_update_7105() {
  $roles = user_roles(TRUE);
  foreach (array('autoassignrole_auto_roles', 'autoassignrole_user_roles') as $variable) {
    $stored_roles = array();
    foreach (variable_get($variable, array()) as $rid => $checked) {
      $stored_roles[$roles[$rid]] = $checked ? $roles[$rid] : 0;
    }
    variable_set($variable, $stored_roles);
  }

  // Add a machine name to {autoassignrole_page} table, to make it exportable.
  db_add_field('autoassignrole_page', 'name', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'description' => 'The unique machine name of this page.'
  ));
  // Add a larger column 'roles' to replace 'rids'.
  db_add_field('autoassignrole_page', 'roles', array(
    'type' => 'text',
    'not null' => FALSE,
    'description' => 'The roles for this page',
    'serialize' => TRUE,
  ));

  // Convert the {autoassignrole_page} table data.
  foreach (db_query("SELECT * FROM {autoassignrole_page}")->fetchAll() as $row) {
    $name = preg_replace('@[^a-z0-9]+@', '_', drupal_strtolower($row->title));
    $suffixed = $name;
    $count = 0;
    // Handle possible duplicates in 'title'.
    while (db_query("SELECT 1 FROM {autoassignrole_page} WHERE name = :name AND rid_page_id <> :id", array(':name' => $suffixed, ':id' => $row->rid_page_id))->fetchField()) {
      $suffixed = $name . '_' . $count;
      $count++;
    }
    $rids = serialize(array_values(array_filter(array_map(function ($rid) use ($roles) {
      return empty($roles[$rid]) ? FALSE : $roles[$rid];
    }, unserialize($row->rids)))));
    db_update('autoassignrole_page')
      ->fields(array('name' => $suffixed, 'roles' => $rids))
      ->condition('rid_page_id', $row->rid_page_id)
      ->execute();
  }

  // Drop legacy fields and indexes.
  db_drop_field('autoassignrole_page', 'rid_page_id');
  db_drop_field('autoassignrole_page', 'rids');
  // Make 'name' primary key.
  db_add_primary_key('autoassignrole_page', array('name'));

  // Fix the 'not null' problem.
  db_change_field('autoassignrole_page', 'name', 'name', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'description' => 'The unique machine name of this page.'
  ));
}
