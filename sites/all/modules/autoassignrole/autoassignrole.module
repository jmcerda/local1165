<?php

/**
 * @file
 * The main autoassignrole.module file
 *
 * Designate a role to assign all new users to in addition to providing a
 * mechanism for new users to select a role or role for their account.
 */

// Says to use element of type radio for role selection.
define('AUTOASSIGNROLE_ELEMENT_RADIO_CHECKBOX', 0);

// Says to use element of type select for role selection.
define('AUTOASSIGNROLE_ELEMENT_SELECT', 1);

// Sets the page display for standard.
define('AUTOASSIGNROLE_PAGE_DISPLAY_STANDARD', 0);

// Sets the page display for individual.
define('AUTOASSIGNROLE_PAGE_DISPLAY_INDIVIDUAL', 1);

/**
 * Implements hook_permission().
 */
function autoassignrole_permission() {
  return array(
    'administer autoassignrole' => array(
      'title' => t('Administer auto assign role'),
      'description' => t('Perform administration tasks for auto assign role.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function autoassignrole_menu() {
  $items = array();
  $items['admin/config/people/autoassignrole'] = array(
    'title' => 'Auto assign role',
    'description' => 'Configure auto role assignment.',
    'access arguments' => array('administer autoassignrole'),
    'page callback' => 'autoassignrole_admin_block_page',
    'file' => 'autoassignrole.admin.inc',
  );
  $items['admin/config/people/autoassignrole/auto'] = array(
    'title' => 'Automatic',
    'description' => 'Configure which role(s) are automatically assigned on user creation.',
    'access arguments' => array('administer autoassignrole'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autoassignrole_auto_settings'),
    'file' => 'autoassignrole.admin.inc',
  );
  $items['admin/config/people/autoassignrole/user'] = array(
    'title' => 'User choice',
    'description' => 'Configure the ability for an end user to choose their own roles during registration.',
    'access arguments' => array('administer autoassignrole'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autoassignrole_user_settings'),
    'file' => 'autoassignrole.admin.inc',
  );
  $items['admin/config/people/autoassignrole/pages'] = array(
    'title' => 'Per Role Pages',
    'description' => 'Configure individual pages to allow user to sign up for a particular role',
    'access arguments' => array('administer autoassignrole'),
    'page callback' => 'autoassignrole_list_pages',
    'file' => 'autoassignrole.admin.inc',
  );
  $items['admin/config/people/autoassignrole/pages/add'] = array(
    'title' => 'Add Auto Assign Role Page',
    'access arguments' => array('administer autoassignrole'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autoassignrole_page_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'autoassignrole.admin.inc',
  );
  $items['admin/config/people/autoassignrole/pages/edit/%autoassignrole_page'] = array(
    'title' => 'Edit Auto Assign Role Page',
    'access arguments' => array('administer autoassignrole'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autoassignrole_page_form', 6),
    'file' => 'autoassignrole.admin.inc',
  );
  $items['admin/config/people/autoassignrole/pages/delete/%autoassignrole_page'] = array(
    'title' => 'Delete Auto Assign Role Page',
    'access arguments' => array('administer autoassignrole'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autoassignrole_page_delete_confirm', 6, 'delete'),
    'file' => 'autoassignrole.admin.inc',
  );
  $items['admin/config/people/autoassignrole/pages/revert/%autoassignrole_page'] = array(
    'title' => 'Revert Auto Assign Role Page',
    'access arguments' => array('administer autoassignrole'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autoassignrole_page_delete_confirm', 6, 'revert'),
    'file' => 'autoassignrole.admin.inc',
  );

  ctools_include('export');
  $pages = ctools_export_crud_load_all('autoassignrole_page');
  foreach ($pages as $page) {
    $roles = drupal_map_assoc($page->roles);
    switch ($page->display) {
      case AUTOASSIGNROLE_PAGE_DISPLAY_STANDARD:
        $items[$page->path] = array(
          'title' => check_plain($page->title),
          'page arguments' => array($roles),
          'page callback' => 'autoassignrole_register',
          'access callback' => 'user_register_access',
          'file' => 'autoassignrole.paths.inc',
          'type' => MENU_NORMAL_ITEM,
          'menu_name' => $page->menu,
        );
        $items[$page->path . '/register'] = array(
          'title' => 'Register',
          'page arguments' => array($roles),
          'page callback' => 'autoassignrole_register',
          'access callback' => 'user_register_access',
          'file' => 'autoassignrole.paths.inc',
          'type' => MENU_DEFAULT_LOCAL_TASK,
        );
        $items[$page->path . '/login'] = array(
          'title' => 'Log In',
          'page callback' => 'autoassignrole_login',
          'access callback' => 'user_is_anonymous',
          'file' => 'autoassignrole.paths.inc',
          'type' => MENU_LOCAL_TASK,
        );
        $items[$page->path . '/password'] = array(
          'title' => 'Request New Password',
          'page callback' => 'autoassignrole_password',
          'access callback' => 'user_is_anonymous',
          'file' => 'autoassignrole.paths.inc',
          'type' => MENU_LOCAL_TASK,
        );
        break;

      case AUTOASSIGNROLE_PAGE_DISPLAY_INDIVIDUAL:
        $items[$page->path] = array(
          'title' => check_plain($page->title),
          'page arguments' => array($roles),
          'page callback' => 'autoassignrole_register',
          'access callback' => 'user_register_access',
          'file' => 'autoassignrole.paths.inc',
          'type' => MENU_CALLBACK,
        );
        $items[$page->path . '/register'] = array(
          'title' => 'Register',
          'page arguments' => array($roles),
          'page callback' => 'autoassignrole_register',
          'access callback' => 'user_register_access',
          'file' => 'autoassignrole.paths.inc',
          'type' => MENU_CALLBACK,
        );
        $items[$page->path . '/login'] = array(
          'title' => 'Log In',
          'page callback' => 'autoassignrole_login',
          'access callback' => 'user_is_anonymous',
          'file' => 'autoassignrole.paths.inc',
          'type' => MENU_CALLBACK,
        );
        $items[$page->path . '/password'] = array(
          'title' => 'Request New Password',
          'page callback' => 'autoassignrole_password',
          'access callback' => 'user_is_anonymous',
          'file' => 'autoassignrole.paths.inc',
          'type' => MENU_CALLBACK,
        );
        break;
    }
  }

  return $items;
}

/**
 * Provides a route loader for loading an Auto assign role page.
 *
 * @param string $name
 *   The page machine name.
 *
 * @return stdClass|false
 *   An Auto assign role page object or FALSE on failure.
 */
function autoassignrole_page_load($name) {
  ctools_include('export');
  $page = ctools_export_crud_load('autoassignrole_page', $name);
  return !empty($page) ? $page : FALSE;
}

/**
 * Creates an empty Auto assign role page object.
 *
 * @param array $values
 *   (optional) Associative array with initial values.
 *
 * @return stdClass
 *   An Auto assign role page object.
 */
function autoassignrole_page_create(array $values = array()) {
  ctools_include('export');
  $page = ctools_export_new_object('autoassignrole_page');

  foreach ($values as $key => $value) {
    if (property_exists($page, $key)) {
      $page->$key = $value;
    }
  }

  return $page;
}

/**
 * Finds any role ids attached to current page, if any.
 */
function autoassignrole_get_active_path_roles() {
  $item = menu_get_item();
  if ($item['page_callback'] == 'autoassignrole_register') {
    return $item['page_arguments'][0];
  }
  return FALSE;
}

/**
 * Implements hook_user_presave().
 */
function autoassignrole_user_presave(&$edit, $account, $category) {
  // Use case http://drupal.org/node/971622
  // Make sure we only assign roles automatically when enabled to do so.
  if (variable_get('autoassignrole_auto_active', 0) || variable_get("autoassignrole_user_active", 0)
    || (variable_get('autoassignrole_admin_active', 0) && user_access('administer users'))
    || autoassignrole_get_active_path_roles()) {
    // Use case http://drupal.org/node/944864
    // Only assign roles if this is a new account.
    if (isset($account->is_new) && !empty($account->is_new)) {
      // Get the existing user roles with the exception of the anonymous role.
      $user_roles = user_roles(TRUE);
      $roles_to_add = array();

      // Add in automatic roles.
      if ((variable_get('autoassignrole_auto_active', 0) && !user_access('administer users'))
        || (variable_get('autoassignrole_admin_active', 0) && user_access('administer users'))) {
        $roles_to_add += array_intersect_key($user_roles, _autoassignrole_convert_roles(variable_get('autoassignrole_auto_roles', array())));
      }

      // Add in user selected roles if any.
      if (variable_get("autoassignrole_user_active", 0) && !empty($edit['user_roles'])) {
        // Value is a single, convert to array.
        if (!is_array($edit['user_roles'])) {
          $edit['user_roles'] = array($edit['user_roles'] => $edit['user_roles']);
        }
        $roles_to_add += array_intersect_key($user_roles, _autoassignrole_convert_roles($edit['user_roles']));
      }

      // Add page-specific roles.
      $page_roles = autoassignrole_get_active_path_roles();
      if ($page_roles) {
        $roles_to_add = array_intersect_key($user_roles, _autoassignrole_convert_roles($page_roles));
      }

      // Make sure the roles key exists.
      if (!isset($edit['roles'])) {
        $edit['roles'] = array();
      }

      // Add in the new roles to override the current roles.
      $edit['roles'] = $roles_to_add + $edit['roles'];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form().
 */
function autoassignrole_form_user_register_form_alter(&$form, &$form_state) {
  if (variable_get("autoassignrole_user_active", 0) && !user_access('administer users')
    && !autoassignrole_get_active_path_roles()) {

    // Get a list of valid roles that can be selected.
    $roles = array_intersect_key(user_roles(TRUE), _autoassignrole_convert_roles(variable_get('autoassignrole_user_roles', array())));

    if ($roles) {
      $form['autoassignrole_user'] = array(
        '#type' => 'fieldset',
        '#title' => filter_xss(variable_get('autoassignrole_user_fieldset_title', t('User Roles'))),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );

      // Sort the roles.
      if (variable_get('autoassignrole_user_sort', 'SORT_ASC') == 'SORT_ASC') {
        asort($roles);
      }
      elseif (variable_get('autoassignrole_user_sort', 'SORT_DESC') == 'SORT_DESC') {
        arsort($roles);
      }
      else {
        drupal_sort_weight($roles, $roles);
      }
      $roles = drupal_map_assoc($roles);

      $multiple = variable_get('autoassignrole_user_multiple', 0);
      $user_selection = variable_get('autoassignrole_user_selection', AUTOASSIGNROLE_ELEMENT_RADIO_CHECKBOX);

      $type = 'select';
      if ($user_selection == AUTOASSIGNROLE_ELEMENT_RADIO_CHECKBOX) {
        $type = $user_selection == AUTOASSIGNROLE_ELEMENT_RADIO_CHECKBOX && !$multiple ? 'radios' : 'checkboxes';
      }

      // If not multiple + not required + select box, need a none selection.
      if (!$multiple && !variable_get('autoassignrole_user_required', 0) && $type == 'select') {
        $roles = array(0 => t('None')) + $roles;
      }

      // Set the user description filter format.
      $autoassignrole_user_description = _autoassignrole_get_user_description();

      // Add in the element.
      $form['autoassignrole_user']['user_roles'] = array(
        '#type' => $type,
        '#title' => filter_xss(variable_get('autoassignrole_user_title', t('Role'))),
        '#options' => $roles,
        '#description' => filter_xss_admin($autoassignrole_user_description['value']),
        '#required' => variable_get('autoassignrole_user_required', 0),
        '#multiple' => $multiple,
      );
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function autoassignrole_form_autoassignrole_user_settings_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'][] = drupal_get_path('module', 'autoassignrole') . '/autoassignrole.js';
}

/**
 * Get the user description filter field data.
 *
 * @return array
 *   The user description filter value.
 */
function _autoassignrole_get_user_description() {
  $defaults = array(
    'value' => t('Select a role'),
    'format' => filter_default_format(),
  );

  return variable_get('autoassignrole_user_description', $defaults);
}

/**
 * Converts the a list of roles that have both keys and values as role name to
 * user_roles() format, taking role IDs as keys.
 *
 * @param array $roles
 *   Roles to be converted.
 * @return array
 *   A list of role names keyed by role id.
 */
function _autoassignrole_convert_roles(array $roles) {
  return array_filter(user_roles(TRUE), function ($role) use ($roles) {
    return !empty($roles[$role]);
  });
}

/**
 * Implements hook_user_role_presave().
 *
 * We guess that in an update process the role might been changed, so we store
 * the existing name before the new one is saved to be compared later.
 */
function autoassignrole_user_role_presave($role) {
  if (!empty($role->rid)) {
    // We store the existing role name to be used later.
    $role->existing_name = db_query("SELECT name FROM {role} WHERE rid = :rid", array(':rid' => $role->rid))->fetchField();
  }
}

/**
 * Implements hook_user_role_update().
 *
 * Update the 'autoassignrole_auto_roles' to reflect the new role name.
 */
function autoassignrole_user_role_update($role) {
  if ($role->name == $role->existing_name) {
    return;
  }

  foreach (array('autoassignrole_auto_roles', 'autoassignrole_user_roles') as $variable) {
    $stored_roles = array();
    foreach (variable_get($variable, array()) as $name => $checked) {
      if ($name == $role->existing_name) {
        $name = $role->name;
        $checked = $checked ? $name : 0;
      }
      $stored_roles[$name] = $checked;
    }
    variable_set($variable, $stored_roles);
  }
}

/**
 * Implements hook_features_pipe_COMPONENT_alter().
 */
function autoassignrole_features_pipe_autoassignrole_page_alter(&$pipe, $data, $export) {
  $variables = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', db_like('autoassignrole_') . '%', 'LIKE')
    ->execute()
    ->fetchCol();
  foreach ($variables as $variable) {
    $pipe['variable'][] = $variable;
  }
}

/**
 * Provides a list of roles having both keys and values as role name.
 *
 * The list is suitable to be used as options list in form API. The built-in
 * 'anonymous' and 'authenticated user' roles are filtered out.
 *
 * @return array
 *   A list of roles.
 */
function autoassignrole_get_roles() {
  $roles = user_roles(TRUE);
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  return drupal_map_assoc($roles);
}
